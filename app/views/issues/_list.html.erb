<% query_options = nil unless defined?(query_options) %>
<% query_options ||= {} %>

<%= form_tag({}, :data => {:cm_url => issues_context_menu_path}) do -%>
<%= hidden_field_tag 'back_url', url_for(:params => request.query_parameters), :id => nil %>
<%= query_columns_hidden_tags(query) %>
<div class="autoscroll">
<table class="list issues odd-even <%= query.css_classes %>">
  <thead>
    <tr>
      <th class="checkbox hide-when-print">
        <%= check_box_tag 'check_all', '', false, :class => 'toggle-selection',
              :title => "#{l(:button_check_all)}/#{l(:button_uncheck_all)}" %>
      </th>
      <% query.inline_columns.each do |column| %>
        <%= column_header(query, column, query_options) %>
      <% end %>
      <th class="buttons"></th>
    </tr>
  </thead>
  <tbody>
  <% grouped_issue_list(issues, query) do |issue, level, group_name, group_count, group_totals| -%>
  <% if group_name %>
    <% reset_cycle %>
    <tr class="group open">
      <td colspan="<%= query.inline_columns.size + 2 %>">
        <span class="expander icon icon-expanded" onclick="toggleRowGroup(this);">&nbsp;</span>
        <span class="name"><%= group_name %></span> <span class="badge badge-count count"><%= group_count %></span> <span class="totals"><%= group_totals %></span>
        <%= link_to_function("#{l(:button_collapse_all)}/#{l(:button_expand_all)}",
                             "toggleAllRowGroups(this)", :class => 'toggle-all') %>
      </td>
    </tr>
  <% end %>


<tr id="issue-<%= issue.id %>" 
    class="hascontextmenu <%= cycle('odd', 'even') %> <%= issue.css_classes %> <%= level > 0 ? "idnt idnt-#{level}" : nil %>"
    data-due-date="<%= issue.due_date %>" 
    data-revised-end-date="<%= issue.custom_field_values.find { |v| v.custom_field.name == 'Revised Planned Due Date' }&.value %>"
      actual-end-date="<%= issue.custom_field_values.find { |v| v.custom_field.name == 'Actual End Date' }&.value || '' %>">
  
  <td class="checkbox hide-when-print"><%= check_box_tag("ids[]", issue.id, false, :id => nil) %></td>
  <% query.inline_columns.each do |column| %>
    <% if column.name == :subject %>
      <%= content_tag('td', column_content(column, issue), style: 'text-align: left;') %>
    <% else %>
      <%= content_tag('td', column_content(column, issue), :class => column.css_classes) %>
    <% end %>
  <% end %>
  <td class="buttons"><%= link_to_context_menu %></td>
</tr>

  <% query.block_columns.each do |column|
       if (text = column_content(column, issue)) && text.present? -%>
  <tr class="<%= current_cycle %>">
    <td colspan="<%= query.inline_columns.size + 2 %>" class="<%= column.css_classes %> block_column">
      <% if query.block_columns.count > 1 %>
        <span><%= column.caption %></span>
      <% end %>
      <%= text %>
    </td>
  </tr>
  <% end -%>
  <% end -%>
  <% end -%>
  </tbody>
</table>
</div>
<% end -%>

<style>
.due-date-overdue {
  color: #e5123d; /* Red color for overdue due date */
}

</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM fully loaded and parsed");

    // Get today's date in 'YYYY-MM-DD' format
    const today = new Date().toISOString().split('T')[0];

    // Loop through each issue row
    document.querySelectorAll('tr.issue').forEach(row => {
      const dueDate = row.getAttribute('data-due-date');
      const revisedEndDate = row.getAttribute('data-revised-end-date');
      const actualEndDate = row.getAttribute('actual-end-date');

      console.log(`Processing issue row: today=${today}, dueDate=${dueDate}, revisedEndDate=${revisedEndDate}, actualEndDate=${actualEndDate}`);

      if (actualEndDate && actualEndDate !== "null" && new Date(actualEndDate) > new Date(dueDate)) {
        console.log("Actual end date is present and greater then due date, highlighting actual end date");
        const actualEndDate = row.querySelector('.cf_60'); // Update the selector to match the correct element
        if (actualEndDate) {
          actualEndDate.classList.add('due-date-overdue'); // Highlight Revised Planned Due Date in red
        }
      // Case 1: If "Revised Planned Due Date" is present and passed, highlight it (Revised Planned Due Date takes priority)
        } else if (revisedEndDate && revisedEndDate !== "null" && new Date(revisedEndDate) <= new Date(today)) {
        console.log("Revised end date is present and passed, highlighting revised end date");
        const revisedEndNode = row.querySelector('.cf_59'); // Update the selector to match the correct element
        if (revisedEndNode) {
          revisedEndNode.classList.add('due-date-overdue'); // Highlight Revised Planned Due Date in red
        }

      // Case 2: If "Revised Planned Due Date" is not present and "Due Date" is passed, highlight Due Date
      } else if ((!revisedEndDate || revisedEndDate === "null") && dueDate && new Date(dueDate) < new Date(today)) {
        console.log("Revised end date is not set, and due date is passed, highlighting due date");
        const dueDateNode = row.querySelector('.due_date');
        if (dueDateNode) {
          dueDateNode.classList.add('due-date-overdue'); // Highlight Due Date in red
        }

      // Case 3: If "Revised Planned Due Date" is present and not passed, no highlighting
      } else if (revisedEndDate && new Date(revisedEndDate) > new Date(today)) {
        console.log("Revised end date is present and not passed, no highlighting");

      // Case 4: If neither due date nor revised planned due date is passed, no highlighting
      } else {
        console.log("Neither due date nor revised end date need highlighting");
      }
    });
  });
</script>

