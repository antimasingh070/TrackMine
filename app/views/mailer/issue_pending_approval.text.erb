  <% def custom_function(field_name)
      custom_field = CustomField.find_by(name: field_name)
      return unless custom_field # Exit if custom field not found
      
      custom_value = CustomValue.find_by(customized_type: "Project", customized_id: @issue.project&.id, custom_field_id: custom_field.id)
      return unless custom_value # Exit if custom value not found
      
      custom_field_enumeration = CustomFieldEnumeration.find_by(id: custom_value.value&.to_i)
      custom_field_enumeration&.name
  end 

  def custom_function_date(issue, field_name)
      custom_field = CustomField.find_by(name: field_name)
      custom_value = CustomValue.find_by(customized_type: "Issue", customized_id: issue&.id, custom_field_id: custom_field&.id)
      custom_field_enumeration = custom_value&.value
      return unless custom_field_enumeration
      if !custom_field_enumeration.nil? 
          date = Date.parse(custom_field_enumeration) 
          formatted_date = date.strftime("%d/%m/%Y")
      else 
          custom_field_enumeration 
      end 
  end %>

  <% assigned_to_id = @issue.assigned_to_id 
  assignee = User.find_by(id: assigned_to_id) %>

  Issue Approval Required

  An issue requires your approval. You can review it directly using the link below:

  View Issue Details: https://Trackmine.neo.com/<%= @issue.id %>

  Issue Details:
  Subject: <%= @issue.subject %>
  Project: <%= @issue.project.name %>
  Status: <%= @issue.status.name %>
  Task Type: <%= @issue.tracker.name %>
  Assigned To: <%= assignee.name %>
  Priority Level: <%= custom_function('Priority Level') %>
  Start Date: <%= @issue.start_date&.strftime("%Y-%m-%d") || 'Not set' %>
  Due Date: <%= @issue.due_date&.strftime("%Y-%m-%d") || 'Not set' %>
  Revised Planned Due Date: <%= custom_function_date(@issue, "Actual End Date") %>

  Valuation and Impact:
  Estimated Cost: <%= custom_function('Estimated Cost') %>
  Estimated Benefit: <%= custom_function('Estimated Benefit') %>

  Project Members:
  <% members_by_role = @issue.project.members.includes(:roles).group_by { |member| member.roles.first.name } %>
  <% members_by_role.each do |role, members| %>
    <%= role %>: <%= members.map { |member| member.user.name }.join(', ') %>
  <% end %>

  Please log in to Trackmine to review, approve, or provide feedback on this issue.

  Best Regards,
  Your Project Management Team
