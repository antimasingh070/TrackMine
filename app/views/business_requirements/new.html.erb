<%= title l(:label_br_new) %>
<div class="d-flex justify-content-end"><button type="button" class="btn btn-secondary" onclick="location.href='<%= business_requirements_path %>'">Back</button></div><br>
<%= form_with(model: @business_requirement, html: { multipart: true }) do |f| %>
    <%= render partial: 'form', locals: { f: f } %>
  <% end %>





<!-- jQuery and Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<h1>Dashboard</h1>

<!-- Responsive Business Requirements UI -->

<div id="toggle-filters-btn" class="toggle-btn">Show Filters</div>
  <!-- Filters Section -->
  <div class="container">
    <div id="filters-container" class="card mt-3" style="display: none;">
      <div class="card-body">
        <form action="" method="get">
          <div class="row">
            
            <div class="col-md-4 mb-3 filter-group">
              <label class="filter-label" for="identifier">Identifier:</label>
              <div class="dropdown">
                <input type="text" id="search_input" placeholder="Search...">
                <div id="dropdown_content" class="dropdown-content">
                  <label><input type="checkbox" name="identifier[]" value="all"> All</label>
                  <% if @identifier.present? %>
                    <% @identifier.each do |identifier| %>
                      <label><input type="checkbox" name="identifier[]" value="<%= identifier %>"> <%= identifier %></label>
                    <% end %>
                  <% end %>
                </div>
              </div>
            </div>
            <!-- Requirement Case Filter -->
            <div class="col-md-4 mb-3 filter-group">
              <label class="filter-label" for="requirement_case">Requirement Case:</label>
              <div class="dropdown">
                <input type="text" id="search_input" placeholder="Search...">
                <div id="dropdown_content" class="dropdown-content">
                  <label><input type="checkbox" name="requirement_case[]" value="all"> All</label>
                  <% if @requirement_case.present? %>
                    <% @requirement_case.each do |requirement_case| %>
                      <label><input type="checkbox" name="requirement_case[]" value="<%= requirement_case %>"> <%= requirement_case %></label>
                    <% end %>
                  <% end %>
                </div>
              </div>
            </div>
    
            <!-- Requirement Received From -->
            <div class="col-md-4 mb-3 filter-group">
              <label class="filter-label" for="requirement_received_from">Requirement Received From:</label>
              <div class="dropdown">
                <input type="text" id="search_input" placeholder="Search...">
                <div id="dropdown_content" class="dropdown-content">
                  <label><input type="checkbox" name="requirement_received_from[]" value="all"> All</label>
                  <% if @requirement_received_from.present? %>
                    <% @requirement_received_from.each do |requirement_received_from| %>
                      <label><input type="checkbox" name="requirement_received_from[]" value="<%= requirement_received_from %>"> <%= requirement_received_from %></label>
                    <% end %>
                  <% end %>
                </div>
              </div>
            </div>
    
            <!-- Project/Enhancement -->
            <div class="col-md-4 mb-3 filter-group">
              <label class="filter-label" for="project_enhancement">Project/Enhancement:</label>
              <div class="dropdown">
                <input type="text" id="search_input" placeholder="Search...">
                <div id="dropdown_content" class="dropdown-content">
                  <label><input type="checkbox" name="project_enhancement[]" value="all"> All</label>
                  <% if @project_enhancement.present? %>
                    <% @project_enhancement.each do |project_enhancement| %>
                      <label><input type="checkbox" name="project_enhancement[]" value="<%= project_enhancement %>"> <%= project_enhancement %></label>
                    <% end %>
                  <% end %>
                </div>
              </div>
            </div>
    
            <!-- Priority Level -->
            <div class="col-md-4 mb-3 filter-group">
              <label class="filter-label" for="priority_level">Priority Level:</label>
              <div class="dropdown">
                <input type="text" id="search_input" placeholder="Search...">
                <div id="dropdown_content" class="dropdown-content">
                  <label><input type="checkbox" name="priority_level[]" value="all"> All</label>
                  <% if @priority_level.present? %>
                    <% @priority_level.each do |priority_level| %>
                      <label><input type="checkbox" name="priority_level[]" value="<%= priority_level %>"> <%= priority_level %></label>
                    <% end %>
                  <% end %>
                </div>
              </div>
            </div>
    
            <!-- Status -->
            <div class="col-md-4 mb-3 filter-group">
              <label class="filter-label" for="status">Status:</label>
              <div class="dropdown">
                <input type="text" id="search_input" placeholder="Search...">
                <div id="dropdown_content" class="dropdown-content">
                  <label><input type="checkbox" name="statuses[]" value="all"> All</label>
                  <% if @statuses.present? %>
                    <% @statuses.each do |statuses| %>
                      <label><input type="checkbox" name="statuses[]" value="<%= statuses %>"> <%= statuses %></label>
                    <% end %>
                  <% end %>
                </div>
              </div>
            </div>

            <div class="col-md-4 mb-3 filter-group">
              <label class="filter-label" for="status">Project Manager:</label>
              <div class="dropdown">
                <input type="text" id="search_input" placeholder="Search...">
                <div id="dropdown_content" class="dropdown-content">
                  <label><input type="checkbox" name="project_manager_usernames[]" value="all"> All</label>
                  <% if @project_manager_usernames.present? %>
                    <% @project_manager_usernames.each do |project_manager_usernames| %>
                      <label><input type="checkbox" name="project_manager_usernames[]" value="<%= project_manager_usernames %>"> <%= project_manager_usernames %></label>
                    <% end %>
                  <% end %>
                </div>
              </div>
            </div>

    
            <!-- Actions -->
            <div class="col-md-12 d-flex justify-content-end">
              <button type="submit" class="btn btn-primary mr-2">Filter</button>
              <button type="button" onclick="clearFilters()" class="btn btn-danger">Clear</button>
              <button type="button" onclick="exportToCsv()" class="btn btn-success mr-2">Export as CSV</button>
              <%= link_to 'New Business Requirement', new_business_requirement_path, class: 'btn btn-primary' %>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
  

<br>
<table>
  <thead>
    <tr>
      <th class='export-csv'>Identifier</th>
      <th class='export-csv'>Requirement Case</th>
      <th class='export-csv'>Description</th>
      <th class='export-csv'>Requirement Received From</th>
      <th class='export-csv'>Project/Enhancement</th>
      <th class='export-csv'>Priority Level</th>
      <th class='export-csv'>Status</th>
      <th class='export-csv'>Program Manager</th>
      <th colspan="3">Actions</th>
    </tr>
  </thead>
  <tbody>
    <% if @business_requirements.blank? %>
        <tr><td colspan=6 style="text-align: center">No recorods to Display</td></tr>
    <% else %>
      <% @business_requirements.each do |business_requirement| %>
          
        <tr>
          <td class='export-csv'><%= business_requirement.identifier %></td>
          <td class='export-csv'><%= business_requirement.requirement_case %></td>
          <td class='export-csv'><%= business_requirement.description %></td>
          <td class='export-csv'><%= business_requirement.requirement_received_from.reject(&:blank?).join(", ") %></td>
          <td class='export-csv'><%= business_requirement.project_enhancement %></td>
          <td class='export-csv'><%= business_requirement.priority_level %></td>
          <td class='export-csv'><%= BusinessRequirement::STATUS_MAP[business_requirement.status] %></td>
          <td class='export-csv'>
            <% grouped_stakeholders = business_requirement.br_stakeholders
                                                          .group_by { |stakeholder| stakeholder.role.name }
                                                          .select { |role_name, _| role_name == 'Project Manager' } %>

            <ul>
              <% grouped_stakeholders.each do |role_name, stakeholders| %>
                <%= stakeholders.map { |stakeholder| stakeholder.user.name }.join(', ') %>
                
              <% end %>
            </ul>
          </td>

          <td>
            <%= link_to 'Show', business_requirement_path(business_requirement), class: 'btn btn-info btn-sm', title: 'Show Business Requirement' %>
            <% if business_requirement.status == 7 %>
              <%= content_tag(:span, 'Accepted', class: 'badge badge-success') %>
            <% elsif business_requirement.status == 8 %>
              <%= content_tag(:span, 'Declined', class: 'badge badge-danger') %>
            <% elsif business_requirement.status == 6 %>
              <%= content_tag(:span, 'Requirement On Hold', class: 'badge badge-primary') %>
            <% else %>
            <% user_stakeholders = business_requirement.br_stakeholders.where(user_id: User.current.id) %>
            <% pmo_role_present = user_stakeholders.any? { |stakeholder| stakeholder.role.name == 'PMO' } %>

            <% if pmo_role_present || User.current.admin? %>
               <%= link_to "Accept", "#", class: 'btn btn-success btn-sm', id: "acceptLink", title: "Accept Business Requirement" %>
              <%= link_to "Hold", "#", class: 'btn btn-primary', id: "holdLink" %>
              <%= link_to "Decline", "#", class: 'btn btn-primary', id: "declineLink" %>
            <% end %>
            <% end %>
          </td>
        </tr>
        <%= stylesheet_link_tag "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" %>
        <div id="holdModal" class="modal1">
          <div class="modal-content1">
            <span class="close">&times;</span>
            <h2>Business Requirement on hold</h2>
            <form id="holdForm" action="<%= hold_business_requirement_path(business_requirement) %>" method="post">
              <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
              <label for="holdRemarks">Reason to Hold<sup>*</sup>:</label>
              <textarea id="holdRemarks" name="remarks" required></textarea>
              <button type="submit">Submit</button>
            </form>
          </div>
        </div>
        <div id="declineModal" class="modal1">
          <div class="modal-content1">
            <span class="close">&times;</span>
            <h2>Business Requirement on decline</h2>
            <form id="declineForm" action="<%= decline_business_requirement_path(business_requirement) %>" method="post">
              <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
              <label for="declineRemarks">Reason to decline<sup>*</sup>:</label>
              <textarea id="declineRemarks" name="remarks" required></textarea>
              <button type="submit">Submit</button>
            </form>
          </div>
        </div>
        <!-- Accept Modal -->
        <div id="acceptModal" class="modal1">
          <div class="modal-content2">
            <span class="close">&times;</span>
            <h2>Accept Business Requirement</h2>
            <div class="modal-body" >
              <form id="acceptForm" action="<%= accept_business_requirement_path(business_requirement) %>" method="post">
                <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
                
                <label for="requirementCase">Requirement Case<sup>*</sup>:</label>
                <input type="text" id="requirementCase" name="requirement_case" class="form-control" placeholder="Enter the requirement case" required>
                
                <label for="identifier">Identifier:</label>
                <input type="text" id="identifier" name="identifier" class="form-control" placeholder="Generated automatically" disabled>
                
                <label for="description">Description<sup>*</sup>:</label>
                <textarea id="description" name="description" class="form-control" rows="4" placeholder="Describe the Business Requirement" required></textarea>
                
                <label for="costBenefits">Cost Benefits:</label>
                <input type="text" id="costBenefits" name="cost_benefits" class="form-control" placeholder="Enter the cost benefits">
                
                <label for="status">Status:</label>
                <select id="status" name="status" class="form-control">
                  <%= options_for_select(BusinessRequirement::STATUS_MAP.map { |k, v| [v, k] }) %>
                </select>
                
                <label for="projectSponsor">Project Sponsor:</label>
                <input type="text" id="projectSponsor" name="project_sponsor" class="form-control" placeholder="Enter project sponsor">
                
                <label for="projectCategory">Project Category<sup>*</sup>:</label>
                <select id="projectCategory" name="project_category" class="form-control" required>
                  <%= options_for_select([['', '']] + (@project_categories.presence&.map { |c| [c, c] } || []), business_requirement.project_category)  %>
                </select>
                <p class="text-danger">This field is required.</p>
                
                <label for="priorityLevel">Priority Level<sup>*</sup>:</label>
                <select id="priorityLevel" name="priority_level" class="form-control" required>
                <%= options_for_select([['', '']] + (@priority_level.presence&.map { |level| [level, level] } || []), business_requirement.priority_level) %>
                </select>
                <p class="text-danger">This field is required.</p>
            
                
                <label for="requirementSubmittedDate">Requirement Submitted Date<sup>*</sup>:</label>
                <input type="date" id="requirementSubmittedDate" name="requirement_submitted_date" class="form-control" required>
                
                <label for="scheduledEndDate">Scheduled End Date:</label>
                <input type="date" id="scheduledEndDate" name="scheduled_end_date" class="form-control">
                
                <label for="businessNeed">Business Need<sup>*</sup>:</label>
                <textarea id="businessNeed" name="business_need_as_per_business_case" class="form-control" rows="2" placeholder="State the business need here" required></textarea>
                
                <label for="isItProject">Is IT Project?<sup>*</sup>:</label>
                <input type="checkbox" id="isItProject" name="is_it_project" class="form-check-input" required>
                
                <button type="submit">Submit</button>
              </form>
            </div>
          </div>
        </div>
      <% end %>
    <% end %>
  </tbody>
</table>
<% begin %>
  <% if @business_requirements.present? && @business_requirements.respond_to?(:current_page) %>
    <span class="pagination"><%= will_paginate @business_requirements, @business_requirements.count %></span>
  <% else %>
  <% end %>
<% rescue StandardError => e %>
  <div class="alert alert-warning" role="alert">
  </div>
  <% Rails.logger.error "Pagination Error: #{e.message}" %>
<% end %>

<style>

  /* Container for dropdown */
  .dropdown {
    position: relative;
    display: inline-block;
    width: 300px; /* Wider for better readability */
  }

  #search_input {
    width: 100px; /* Full width to match dropdown */
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
  }

  .dropdown-content {
    display: none; /* Default hidden, shown dynamically */
    position: absolute;
    top: calc(100% + 4px); /* Slight gap from the input box */
    left: 0;
    width: 100%;
    background: #fff;
    border: 1px solid #ccc;
    border-radius: 4px; /* Rounded corners for better UI */
    max-height: 200px; /* Slightly taller for more options */
    overflow-y: auto; /* Scrollable when content exceeds height */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow for better visibility */
    z-index: 10;
  }

  .dropdown-content label {
    display: block;
    padding: 6px 12px;
    margin: 0; /* Maintain consistent spacing */
    font-size: 14px; /* Slightly larger text for readability */
    cursor: pointer; /* Indicate clickable items */
  }

  .dropdown-content label:hover {
    background-color: #f7f7f7; /* Highlight on hover */
  }

  .dropdown-content input[type="checkbox"] {
    margin-right: 8px; /* Space between checkbox and label text */
  }
  .container {
    margin-top: 10px;
    font-size: 9px;
    display: flex;
  }
    .toggle-btn {
      display: inline-block;
      padding: 6px 12px; /* Smaller padding */
      border: 1px solid #ccc;
      border-radius: 20px; /* Smaller rounded corners */
      font-size: 10px; /* Smaller font size */
      font-weight: 400; /* Reduced font weight */
      cursor: pointer;
      background-color: #f1f1f1;
      color: #333;
      text-align: center;
      transition: all 0.3s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Reduced shadow size */
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      border: 1px solid #dddddd;
      text-align: left;
      padding: 8px;
      word-wrap: break-word;
    }
    th {
      background-color: #f2f2f2;
    }
    .toggle-btn:hover {
      background-color: #e0e0e0;
      transform: translateY(-1px);
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1); /* Slightly enhanced shadow */
    }

    .toggle-btn:focus {
      outline: none;
      box-shadow: 0 0 5px 2px rgba(0, 0, 255, 0.5);
    }

    #toggle-filters-btn, #toggle-rag-btn {
      float: right;
      background-color: #f1f1f1;
    }
    *{
      font-size: 12px;
    }
    @media (min-width: 768px) {
      .container-1,
      .container-2 {
        width: 45%;
        margin-left: 2.5%;
      }

      .form-container {
        width: 100%;
      }
    }

    @media (min-width: 1200px) {
      .container-1,
      .container-2 {
        width: 45%;
        margin-left: 2.5%;
      }

      .form-container {
        width: 45%;
        margin-left: 2.5%;
      }
    }  
    table {
        border-collapse: collapse;
        width: 100%;
        font-family: Arial, sans-serif;
    }

    th, td {
        border: 1px solid #dddddd;
        padding: 8px;
        text-align: left;
        font-size: 14px;
    }

    th {
        background-color: #f9f9f9;
        font-weight: bold;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    .btn {
        padding: 5px 10px;
        border: none;
        border-radius: 4px;
        text-decoration: none;
        margin: 2px;
    }

    .btn-custom-success {
        background-color: #28a745; /* Bootstrap green color */
        border-color: #28a745;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-info {
        background-color: #17a2b8;
        color: white;
    }

    .btn-warning {
        background-color: #ffc107;
        color: black;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-sm {
        font-size: 12px;
    }
    .modal1 {
      display: none; /* Hidden by default */
      position: fixed; /* Stay in place */
      z-index: 1; /* Sit on top */
      left: 0;
      top: 0;
      font-weight: bold;
      width: 100%; /* Full width */
      height: 100%; /* Full height */
      overflow: auto; /* Enable scroll if needed */
      background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
    }
  /* Modal Content/Box */
  .modal-content1 {
    background-color: #0065ff; /* Blue background */
    color: #fff; /* White text */
    margin: 15% auto; /* 15% from the top and centered */
    padding: 20px;
    border: 1px solid #888;
    width: 29%; /* Smaller width */
    height: 33%;
    border-radius: 10px; /* Rounded corners */
  }


  /* Modal Content/Box */
  .modal-content2 {
    position: fixed;
    background-color: #0065ff; /* Blue background */
    color: #fff; /* White text */
    margin: 15% auto; /* 15% from the top and centered */
    padding: 20px;
    border: 1px solid #888;
    width: 29%; /* Smaller width */
    height: 70%;
    top: 15%;
    left: 50%;
    transform: translate(-50%, -50%);

    border-radius: 10px; /* Rounded corners */
  }
  /* Scrollable Body */
  .modal-body {
    flex: 1;
    overflow-y: auto;
    max-height: 60vh; /* Adjust as needed */
    padding-right: 10px; /* Prevent scrollbar overlap */
  }
  /* The Close Button */
  .close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }

  .close:hover,
  .close:focus {
    color: #fff; /* White text on hover */
    text-decoration: none;
    cursor: pointer;
  }
  #remarks {
    width: 100%;
    height: 80px; /* Adjust the height as needed */
  }

  /* Form Styles */
  #holdForm, #declineForm, #acceptForm {
    display: flex;
    flex-direction: column;
  }


  #holdForm label, #declineForm label,
  #acceptForm label{
    margin-bottom: 8px;
  }

  #holdForm textarea, #declineForm textarea,
  #acceptForm textarea {
    margin-bottom: 12px;
    padding: 8px;
    border: none;
    border-radius: 4px;
    display: flex;
    width: 360px; /* Set a fixed width */
    height: 100px; /* Set a fixed height */
    resize: none; 
  }

  #holdForm button, #declineForm button, #acceptForm button {
    background-color: #0051cc;
    color: #fff;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    align-self: center;
  }

  #remarks:required:invalid {
    border-color: #ff0000; /* Red color */
  }

  #holdForm button:hover, #declineForm button:hover,
  #acceptForm button:hover {
    background-color: #0000FF;
  }
  table {
    width: 100%;
    border-collapse: collapse;
  }

  table th, table td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
  }

  table th {
    background-color: #f4f4f4;
  }

  .btn {
    margin-right: 5px;
  }
  label > sup {
    color: #ff0000; /* Red color */
    font-size: 12px; /* Smaller font size */
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', function () {
  console.log("DOM fully loaded and parsed");

  // Get modals and buttons
  var modals = {
    hold: document.getElementById("holdModal"),
    decline: document.getElementById("declineModal"),
    accept: document.getElementById("acceptModal")
  };

  var links = {
    hold: document.getElementById("holdLink"),
    decline: document.getElementById("declineLink"),
    accept: document.getElementById("acceptLink") 
  };

  console.log("Modals:", modals);
  console.log("Links:", links);

  // Open modals
  Object.keys(links).forEach(key => {
    if (links[key] && modals[key]) { // Check if both the link and modal exist
      links[key].onclick = function () {
        console.log(key + " link clicked");
        modals[key].style.display = "block";
      }
    } else {
      console.log(key + " link or modal is null");
    }
  });

  // Close modals on span click
  var spans = document.getElementsByClassName("close");
  Array.prototype.forEach.call(spans, function (span) {
    span.onclick = function () {
      Object.keys(modals).forEach(key => {
        if (modals[key]) {
          modals[key].style.display = "none";
        }
      });
    };
  });

  // Close modals on outside click
  window.onclick = function (event) {
    Object.keys(modals).forEach(key => {
      if (modals[key] && event.target == modals[key]) {
        modals[key].style.display = "none";
      }
    });
  }
  });
</script>
<script>

  document.getElementById('search_input').addEventListener('input', function() {
    const query = this.value.toLowerCase();
    const items = document.querySelectorAll('#dropdown_content label');
    
    items.forEach(item => {
      item.style.display = item.textContent.toLowerCase().includes(query) ? '' : 'none';
    });
  });

  function exportToCsv() {
      // Utility function to wrap text at a specific width (if needed)
      const filterParams = new URLSearchParams();
    const filters = [
        'identifier',
        'requirement_case',
        'requirement_received_from',
        'status',
        'priority_level',
        'project_enhancement',
        'portfolio_category',
        'project_manager'
    ];

    // Populate filter parameters dynamically
    filters.forEach(filter => {
        const element = document.querySelector(`[name="${filter}"]`);
        if (element && element.value) {
            filterParams.append(filter, element.value);
        }
    });
      function wrapText(text, maxWidth) {
          const words = text.split(' ');
          let wrappedText = '';
          let currentLine = '';

          words.forEach(word => {
              if ((currentLine + word).length > maxWidth) {
                  wrappedText += currentLine.trim() + '\n';
                  currentLine = word + ' ';
              } else {
                  currentLine += word + ' ';
              }
          });

          wrappedText += currentLine.trim();
          return wrappedText;
      }

      fetch(`/business_requirements/export_all?${filterParams.toString()}`, { headers: { Accept: 'text/csv' } })
          .then(response => {
              if (!response.ok) {
                  throw new Error('Failed to fetch CSV data');
              }
              return response.text(); // Read response as plain text
          })
          .then(csvData => {
              // Ensure CSV columns with multi-word headers remain intact
              const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8' });
              saveAs(blob, 'business_requirements.csv');
          })
          .catch(error => {
              console.error('Error exporting data to CSV:', error);
          });
  }

</script>

<script>
  function toggleDisplay(buttonId, containerId, showText, hideText) {
    const button = document.getElementById(buttonId);
    const container = document.getElementById(containerId);
    
    if (container.style.display === 'none' || container.style.display === '') {
        container.style.display = 'block';
        button.textContent = hideText;
    } else {
        container.style.display = 'none';
        button.textContent = showText;
    }
  }

  document.getElementById('toggle-filters-btn').addEventListener('click', function () {
    toggleDisplay('toggle-filters-btn', 'filters-container', 'Hide Filters', 'Show Filters');
  });

  document.getElementById('toggle-rag-btn').addEventListener('click', function () {
    toggleDisplay('toggle-rag-btn', 'rag-container', 'Hide RAG Status', 'Show RAG Status');
  });
</script>