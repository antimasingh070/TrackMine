<%= javascript_include_tag "https://code.highcharts.com/highcharts.js" %>
<%= javascript_include_tag "https://code.highcharts.com/modules/annotations.js" %>

<%
params[:type] ||= "Project" 
if params[:type] == "Project"
  @financial_year_start = Date.new(Date.today.year, 4, 1)  # Default: April 1 of the current year
  @financial_year_end = Date.new(Date.today.year + 1, 3, 31)  # Default: March 31 of the next year

  # Adjust for months before April (January, February, March)
  if Date.today.month < 4
    @financial_year_start = Date.new(Date.today.year - 1, 4, 1)  # Start: April 1 of last year
    @financial_year_end = Date.new(Date.today.year, 3, 31)  # End: March 31 of this year
  end

  # Initialize pieChartData with default values
  pieChartData = {
    last_year: [@total_last_year[:percentage], @total_last_year[:percentage]],
    year_to_date: [@total_year_to_date[:percentage], @total_year_to_date[:percentage]],
    this_month: [@total_this_month[:percentage], @total_this_month[:percentage]]
  }

  # Adjust pieChartData based on delayed_projects
  if (@total_last_year[:delayed_projects].blank? && @total_last_year[:ontime_projects].blank?) 
    pieChartData[:last_year] = [@total_last_year[:percentage], @total_last_year[:percentage]]
  elsif (@total_last_year[:delayed_projects].present? && @total_last_year[:ontime_projects].present?)
    pieChartData[:last_year] = [@total_last_year[:percentage], 100 - @total_last_year[:percentage]]
  elsif @total_last_year[:delayed_projects].blank? && @total_last_year[:ontime_projects].present?
    pieChartData[:last_year] = [100 - @total_last_year[:percentage], @total_last_year[:percentage]]
  elsif @total_last_year[:delayed_projects].present?  && @total_last_year[:ontime_projects].blank?
    pieChartData[:last_year] = [@total_last_year[:percentage], 100 - @total_last_year[:percentage]]
  end

  if (@total_year_to_date[:delayed_projects].blank? &&  @total_year_to_date[:ontime_projects].blank?) 
    pieChartData[:year_to_date] = [@total_year_to_date[:percentage], @total_year_to_date[:percentage]]
  elsif @total_year_to_date[:delayed_projects].present? &&  @total_year_to_date[:ontime_projects].present?
    pieChartData[:year_to_date] = [@total_year_to_date[:percentage], 100 - @total_year_to_date[:percentage]]
  elsif @total_year_to_date[:delayed_projects].blank? &&  @total_year_to_date[:ontime_projects].present?
    pieChartData[:year_to_date] = [100 - @total_year_to_date[:percentage], @total_year_to_date[:percentage]]
  elsif @total_year_to_date[:delayed_projects].present? &&  @total_year_to_date[:ontime_projects].blank?
    pieChartData[:year_to_date] = [@total_year_to_date[:percentage], 100 - @total_year_to_date[:percentage]]
  end
  if (@total_this_month[:delayed_projects].blank? && @total_this_month[:ontime_projects].blank?) 
    pieChartData[:this_month] = [@total_this_month[:percentage], @total_this_month[:percentage]]
  elsif (@total_this_month[:delayed_projects].present? && @total_this_month[:ontime_projects].present?)
    pieChartData[:this_month] = [@total_this_month[:percentage], 100 - @total_this_month[:percentage]]
  elsif @total_this_month[:delayed_projects].blank? && @total_this_month[:ontime_projects].present?
    pieChartData[:this_month] = [100 - @total_this_month[:percentage], @total_this_month[:percentage]]
  elsif @total_this_month[:delayed_projects].present? && @total_this_month[:ontime_projects].blank?
    pieChartData[:this_month] = [@total_this_month[:percentage], 100 - @total_this_month[:percentage]]
  end

  # Prepare chart data for Highcharts
  @chart_data1 = @priorities.to_a.map do |priority|

    {
      name: priority,
      data: [
        project_count(@projects, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_ACTIVE),
        project_count(@projects, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_HOLD),
        project_count(@projects, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_GO_LIVE),
        project_count(@projects, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_CLOSED),
        project_count(@projects, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_CANCELLED)
      ]
    }
  end

  @chart_data2 = @categories.to_a.map do |category|
    {
      name: category,
      data: [
        project_count(@projects, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_ACTIVE),
        project_count(@projects, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_HOLD),
        project_count(@projects, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_GO_LIVE), 
        project_count(@projects, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_CLOSED),
        project_count(@projects, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_CANCELLED)
      ]
    }
  end

    
  @chart_data3 = @application_names.to_a.map do |application_name|
    {
      name: application_name,
      data: [
        project_count(@projects, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_ACTIVE),
        project_count(@projects, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_HOLD),
        project_count(@projects, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_GO_LIVE), 
        project_count(@projects, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_CLOSED),
        project_count(@projects, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], Project::STATUS_CANCELLED)
      ]
    }
  end
else
  # Prepare chart data for Highcharts
  @chart_data1 = @priorities.to_a.map do |priority|

    {
      name: priority,
      data: [
        business_requirement_count(@business_requirements, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_IN_DISCUSSION),
        business_requirement_count(@business_requirements, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_REQUIREMENT_FINILIZED),
        business_requirement_count(@business_requirements, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_AWAITING_DETAILS),
        business_requirement_count(@business_requirements, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_AWATING_BUSINESS_CASE),
        business_requirement_count(@business_requirements, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_REQUIREMENT_NOT_APPROVED),
        business_requirement_count(@business_requirements, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_REQUIREMENT_ON_HOLD),
        business_requirement_count(@business_requirements, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_ACCEPTED),
        business_requirement_count(@business_requirements, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_CANCELLED),
        business_requirement_count(@business_requirements, priority, "Priority Level", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_CLOSED)
      ]
    }
  end

  @chart_data2 = @categories.to_a.map do |category|
    {
      name: category,
      data: [
        business_requirement_count(@business_requirements, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_IN_DISCUSSION),
        business_requirement_count(@business_requirements, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_REQUIREMENT_FINILIZED),
        business_requirement_count(@business_requirements, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_AWAITING_DETAILS), 
        business_requirement_count(@business_requirements, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_AWATING_BUSINESS_CASE),
        business_requirement_count(@business_requirements, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_REQUIREMENT_NOT_APPROVED),
        business_requirement_count(@business_requirements, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_REQUIREMENT_ON_HOLD),
        business_requirement_count(@business_requirements, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_ACCEPTED),
        business_requirement_count(@business_requirements, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_CANCELLED),
        business_requirement_count(@business_requirements, category, "Project Category", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_CLOSED)
      ]
    }
  end

    
  @chart_data3 = @application_names.to_a.map do |application_name|
    {
      name: application_name,
      data: [
        business_requirement_count(@business_requirements, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_IN_DISCUSSION),
        business_requirement_count(@business_requirements, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_REQUIREMENT_FINILIZED),
        business_requirement_count(@business_requirements, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_AWAITING_DETAILS), 
        business_requirement_count(@business_requirements, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_AWATING_BUSINESS_CASE),
        business_requirement_count(@business_requirements, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_REQUIREMENT_NOT_APPROVED),
        business_requirement_count(@business_requirements, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_REQUIREMENT_ON_HOLD),
        business_requirement_count(@business_requirements, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_ACCEPTED),
        business_requirement_count(@business_requirements, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_CANCELLED),
        business_requirement_count(@business_requirements, application_name, "Application Name", params[:program_manager_usernames], params[:project_manager_usernames], BusinessRequirement::STATUS_CLOSED)
      ]
    }
  end
end
%>





<div class="mb-4">
  <label for="type-selector">Select Type:</label>
  <select id="type-selector" class="form-control" onchange="location = this.value;">
    <option value="<%= project_score_card_path(type: 'Project') %>" <%= 'selected' if params[:type] == 'Project' %>>Project</option>
    <option value="<%= project_score_card_path(type: 'Business Requirment') %>" <%= 'selected' if params[:type] == 'Business Requirment' %>>Business Requirement</option>
  </select>
</div>




<form action="" method="get" class="filter-form">
  <div class="filter-container">
    <!-- Program Manager Filter -->
    <div class="filter-group">
      <label for="search_input1" class="filter-label">Program Manager:</label>
      <div class="dropdown">
        <input type="text" id="search_input1" class="filter-input" placeholder="Search..." onkeyup="filterDropdown('dropdown_content1')">
        <div id="dropdown_content1" class="dropdown-content">
          <label>
            <input type="checkbox" name="program_manager_usernames[]" value="all" onchange="selectAll(this, 'program_manager_usernames[]')"> All
          </label>
          <% if @program_manager_usernames.present? %>
            <% @program_manager_usernames.each do |username| %>
              <label>
                <input type="checkbox" name="program_manager_usernames[]" value="<%= username %>"
                  <%= params[:program_manager_usernames]&.include?(username) ? 'checked' : '' %>>
                <%= username %>
              </label>
            <% end %>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Project Manager Filter -->
    <div class="filter-group">
      <label for="search_input2" class="filter-label">Project Manager:</label>
      <div class="dropdown">
        <input type="text" id="search_input2" class="filter-input" placeholder="Search..." onkeyup="filterDropdown('dropdown_content2')">
        <div id="dropdown_content2" class="dropdown-content">
          <label>
            <input type="checkbox" name="project_manager_usernames[]" value="all" onchange="selectAll(this, 'project_manager_usernames[]')"> All
          </label>
          <% if @project_manager_usernames.present? %>
            <% @project_manager_usernames.each do |username| %>
              <label>
                <input type="checkbox" name="project_manager_usernames[]" value="<%= username %>"
                  <%= params[:project_manager_usernames]&.include?(username) ? 'checked' : '' %>>
                <%= username %>
              </label>
            <% end %>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Buttons -->
    <div class="button-group">
    <input type="submit" value="Filter">
      <button type="button" onclick="clearFilters()" class="btn secondary">Clear</button>
    </div>
  </div>
</form>

<br>
<div class="card" style="border: 1px solid #ddd; padding: 15px; border-radius: 8px; box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1); max-width: 100%; display: flex; flex-direction: row; gap: 15px; align-items: center; overflow-x: auto; white-space: nowrap; background-color: #0065ff; color: white;">
  <% [["Total Project", Project.all.count], 
      ["Active", @active_projects], 
      ["Closed", @closed_projects], 
      ["Hold", @hold_projects], 
      ["Cancelled", @cancelled_projects], 
      ["Go Live", @go_live_projects]].each do |text, count| %>
    <div style="display: flex; gap: 5px; flex-shrink: 0;">
      <span style="font-weight: bold;"><%= text %>:</span>
      <span><%= count %></span>
    </div>
  <% end %>
</div>
<br>
<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Initialize dropdowns
    initializeDropdown("dropdown_content1");
    initializeDropdown("dropdown_content2");

    // Retain selected checkboxes
    retainSelectedCheckboxes('program_manager_usernames[]', <%= params[:program_manager_usernames].to_json.html_safe %>);
    retainSelectedCheckboxes('project_manager_usernames[]', <%= params[:project_manager_usernames].to_json.html_safe %>);
  });

  function initializeDropdown(dropdownId) {
    let dropdown = document.getElementById(dropdownId);

    // Keep dropdown open on click
    document.querySelector(`#${dropdownId}`).closest(".dropdown").addEventListener("click", function(event) {
      event.stopPropagation();
      dropdown.style.display = (dropdown.style.display === "block") ? "none" : "block";
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", function(event) {
      if (!event.target.closest(".dropdown")) {
        dropdown.style.display = "none";
      }
    });
  }

  function retainSelectedCheckboxes(name, selectedValues) {
    selectedValues = new Set(selectedValues || []);
    document.querySelectorAll(`input[name="${name}"]`).forEach(checkbox => {
      if (selectedValues.has(checkbox.value)) {
        checkbox.checked = true;
      }
    });
  }

  function filterDropdown(dropdownId) {
    let input = document.getElementById(`search_input${dropdownId.slice(-1)}`).value.toLowerCase();
    let options = document.querySelectorAll(`#${dropdownId} label`);

    options.forEach(option => {
      let text = option.textContent.toLowerCase();
      option.style.display = text.includes(input) ? "" : "none";
    });
  }

  function selectAll(checkbox, name) {
    let checkboxes = document.querySelectorAll(`input[name="${name}"]`);
    checkboxes.forEach(cb => cb.checked = checkbox.checked);
  }


  function clearFilters() {
    var programManager = document.getElementById('program_manager_usernames');
    var projectManager = document.getElementById('project_manager_usernames');
    var formGroup = document.getElementById('form-group');
    if (programManager) programManager.value = '';
    if (projectManager) projectManager.value = '';
    if (formGroup) formGroup.click();
  }

</script>

<div style="display: flex; justify-content: space-between;">
  <div id="categoryChart" style="width: 48%; height: 500px;"></div>
  <div id="priorityChart" style="width: 48%; height: 500px;"></div>
  <div id="applicationNameChart" style="width: 48%; height: 500px;"></div>
</div>
<div style="display: flex; flex-direction: column;">
  

  <!-- Second Row -->
  <div style="display: flex; justify-content: space-between;">
    <!-- First Column (First chart) -->
    <div  id="last-year-chart" style="flex: 1; display: flex; flex-direction: column; align-items: center;">
      <div id="last-year-pie-chart" style="width: 100%; height: 250px; margin-bottom: 20px;"></div>
    </div>
    
    <!-- Second Column (Second chart) -->
    <div id="year-to-date-chart" style="flex: 1; display: flex; flex-direction: column; align-items: center;">
      <div id="year-to-date-pie-chart" style="width: 100%; height: 250px; margin-bottom: 20px;"></div>
    </div>
    
    <!-- Third Column (Third chart) -->
    <div id="this-month-chart" style="flex: 1; display: flex; flex-direction: column; align-items: center;">
      <div id="this-month-pie-chart" style="width: 100%; height: 250px;"></div>
    </div>
  </div>
</div>
<br><br><br>


<div class="dashboard-container">
  <div class="project-scorecard"><br>
    <div>
      <% @categories.each do |category| %>
        <% @project_status_text.each do |status_key, status_value| %>
          <div class="chart-projects1" id="category-<%= category.downcase.gsub(' ', '-') %>-status-<%= status_value.downcase.gsub(' ', '-') %>-table" style="display: none;">
            <h2><%= category %> - <%= status_value %></h2>
            <table>
              <thead>
                <tr>
                  <th>Project</th>
                  <th>Status</th>
                  <th>Category</th>
                  <th>Scheduled End</th>
                  <th>Actual End</th>
                  <th>RAG Status</th>
                </tr>
              </thead>
              <tbody>
                <% projects = filter_projects_by_status_and_field_name(@projects, params[:program_manager_usernames], params[:project_manager_usernames], status_key, category, "Project Category") %>
                <% if projects.blank? %>
                  <tr>
                    <td colspan="4" style="text-align: center;">No records to display.</td>
                  </tr>
                <% else %>
                  <% projects.each do |project| %>
                    <tr>
                      <td><%= link_to project.name, project_path(project) %></td>
                      <td><%=  @project_status_text[project.status] %></td>
                      <td><%= custom_field_value(project, "Project Category") %></td>
                      <td><%= formatted_date(date_value(project, "Scheduled End Date")) %></td>
                      <td><%= formatted_date(date_value(project, "Actual End Date")) %></td>
                      <td></td>
                    </tr>
                  <% end %>
                <% end %>
              </tbody>
            </table>
            <button onclick="exportToCSV('category', '<%= category %>', '<%= status_value %>')">
              Export CSV
            </button>
          </div>
        <% end %>
      <% end %>
    </div>
    <div>
      <% @priorities.each do |priority| %>
        <% @project_status_text.each do |status_key, status_value| %>
          <div class="chart-projects2" id="priority-<%= priority.downcase.gsub(' ', '-') %>-status-<%= status_value.downcase.gsub(' ', '-') %>-table" style="display: none;">
            <h2><%= priority %> - <%= status_value %></h2>
            <table>
              <thead>
                <tr>
                  <th>Project</th>
                  <th>Status</th>
                  <th>Priority</th>
                  <th>Scheduled End</th>
                  <th>Actual End</th>
                  <th>RAG Status</th>
                </tr>
              </thead>
              <tbody>
                <% projects = filter_projects_by_status_and_field_name(@projects, params[:program_manager_usernames], params[:project_manager_usernames], status_key, priority, "Priority Level") %>
                <% if projects.blank? %>
                  <tr>
                    <td colspan="4" style="text-align: center;">No records to display.</td>
                  </tr>
                <% else %>
                  <% projects.each do |project| %>
                    <tr>
                      <td><%= link_to project.name, project_path(project) %></td>
                      <td><%=  @project_status_text[project.status] %></td>
                       <td><%= custom_field_value(project, "Priority Level") %></td>
                      <td><%= formatted_date(date_value(project, "Scheduled End Date")) %></td>
                      <td><%= formatted_date(date_value(project, "Actual End Date")) %></td>
                      <td></td>
                    </tr>
                  <% end %>
                <% end %>
              </tbody>
            </table>
            <button onclick="exportToCSV('priority', '<%= priority.downcase.gsub(' ', '-') %>', '<%= status_value.downcase.gsub(' ', '-') %>')">
              Export CSV
            </button>
          </div>
        <% end %>
      <% end %>

    </div>
    <div>
      <% @application_names.each do |application_name| %>
        <% @project_status_text.each do |status_key, status_value| %>
          <div class="chart-projects3" id="application_name-<%= application_name.downcase.gsub(' ', '-') %>-status-<%= status_value.downcase.gsub(' ', '-') %>-table" style="display: none;">
            <h2><%= application_name %> - <%= status_value %></h2>
            <table>
              <thead>
                <tr>
                  <th>Project</th>
                  <th>Status</th>
                  <th>Application Name</th>
                  <th>Scheduled End</th>
                  <th>Actual End</th>
                  <th>RAG Status</th>
                </tr>
              </thead>
              <tbody>
                <% projects = filter_projects_by_status_and_field_name(@projects, params[:program_manager_usernames], params[:project_manager_usernames], status_key, application_name, "Application Name") %>
                <% if projects.blank? %>
                  <tr>
                    <td colspan="4" style="text-align: center;">No records to display.</td>
                  </tr>
                <% else %>
                  <% projects.each do |project| %>
                    <tr>
                      <td><%= link_to project.name, project_path(project) %></td>
                      <td><%=  @project_status_text[project.status] %></td>
                      <td><%= custom_field_value(project, "Application Name") %></td>
                      <td><%= formatted_date(date_value(project, "Scheduled End Date")) %></td>
                      <td><%= formatted_date(date_value(project, "Actual End Date")) %></td>
                      <td></td>
                    </tr>
                  <% end %>
                <% end %>
              </tbody>
            </table>
            <button onclick="exportToCSV('application_name', '<%= application_name.downcase.gsub(' ', '-') %>', '<%= status_value.downcase.gsub(' ', '-') %>')">
              Export CSV
            </button>
          </div>
        <% end %>
      <% end %>

    </div>
    <% params[:type] ||= "Project" %>
    <% if params[:type] == "Project" %>
        <div class="chart-projects" id="last-year-delayed-table">
          <h2>Last Year (Delayed)</h2>
          <table>
            <thead>
              <tr>
                <th>Project</th>
                <th>Scheduled End</th>
                <th>Actual End</th>
                <th>Rag Status</th>
              </tr>
            </thead>
            <tbody>
              <% if @total_last_year[:delayed_projects].blank? %>
                <tr><td colspan="8" style="text-align: center;">No records to display.</td></tr>
              <% else %>
                <% @total_last_year[:delayed_projects].each do |data| %>
                  <tr>
                    <td><%= link_to data.name, project_path(data) %></td>
                    <td><%= formatted_date(date_value(data, "Scheduled End Date")) %></td>
                    <td><%= formatted_date(date_value(data, "Actual End Date")) %></td>
                    <td></td>
                  </tr>
                <% end %>
              <% end %>
            </tbody>
          </table>
          <button onclick="exportToCSV('last-year', 'delayed')">Export CSV</button>
        </div>
        <div class="chart-projects" id="last-year-ontime-table">
          <h2>Last Year (Ontime)</h2>
          <table>
            <thead>
              <tr>
                <th>Project</th>
                <th>Scheduled End</th>
                <th>Actual End</th>
                <th>Rag Status</th>
              </tr>
            </thead>
            <tbody>
              <% if @total_last_year[:ontime_projects].blank? %>
                <tr><td colspan="8" style="text-align: center;">No records to display.</td></tr>
              <% else %>
                <% @total_last_year[:ontime_projects].each do |data| %>
                  <tr>
                    <td><%= link_to data.name, project_path(data) %></td>
                    <td><%= formatted_date(date_value(data, "Scheduled End Date")) %></td>
                    <td><%= formatted_date(date_value(data, "Actual End Date")) %></td>
                    <td></td>
                  </tr>
                <% end %>
              <% end %>
            </tbody>
          </table>
          <button onclick="exportToCSV('last-year', 'ontime')">Export CSV</button>

        </div>
        <div class="chart-projects" id="year-to-date-delayed-table">
          <h2>Year to Date (Delayed)</h2>
          <table>
            <thead>
              <tr>
                <th>Project</th>
                <th>Scheduled End</th>
                <th>Actual End</th>
                <th>Rag Status</th>
              </tr>
            </thead>
            <tbody>
             
              <% if @total_year_to_date[:delayed_projects].blank? %>
                <tr><td colspan="8" style="text-align: center;">No records to display.</td></tr>
              <% else %>
                <% @total_year_to_date[:delayed_projects].each do |data| %>
                  <tr>
                    <td><%= link_to data.name, project_path(data) %></td>
                    <td><%= formatted_date(date_value(data, "Scheduled End Date")) %></td>
                    <td><%= formatted_date(date_value(data, "Actual End Date")) %></td>
                    <td></td>
                  </tr>
                <% end %>
              <% end %>
            </tbody>
          </table>
        </div>
        <div class="chart-projects" id="year-to-date-ontime-table">
          <h2>Year to Date (Ontime)</h2>
          <table>
            <thead>
              <tr>
                <th>Project</th>
                <th>Scheduled End</th>
                <th>Actual End</th>
                <th>Rag Status</th>
              </tr>
            </thead>
            <tbody>
              <% if @total_year_to_date[:ontime_projects].blank? %>
                <tr><td colspan="8" style="text-align: center;">No records to display.</td></tr>
              <% else %>
                <% @total_year_to_date[:ontime_projects].each do |data| %>
                  <tr>
                    <td><%= link_to data.name, project_path(data) %></td>
                    <td><%= formatted_date(date_value(data, "Scheduled End Date")) %></td>
                    <td><%= formatted_date(date_value(data, "Actual End Date")) %></td>
                    <td></td>
                  </tr>
                <% end %>
              <% end %>
            </tbody>
          </table>
        </div>
        <div class="chart-projects" id="this-month-delayed-table">
          <h2>This Month (Delayed)</h2>
          <table>
            <thead>
              <tr>
                <th>Project</th>
                <th>Scheduled End</th>
                <th>Actual End</th>
                <th>Rag Status</th>
              </tr>
            </thead>
            <tbody>
              <% if @total_this_month[:delayed_projects].blank? %>
                <tr><td colspan="8" style="text-align: center;">No records to display.</td></tr>
              <% else %>
                <% @total_this_month[:delayed_projects].each do |data| %>
                  <tr>
                    <td><%= link_to data.name, project_path(data) %></td>
                    <td><%= formatted_date(date_value(data, "Scheduled End Date")) %></td>
                    <td><%= formatted_date(date_value(data, "Actual End Date")) %></td>
                    <td></td>
                  </tr>
                <% end %>
              <% end %>
            </tbody>
          </table>
        </div>
        <div class="chart-projects" id="this-month-ontime-table">
          <h2>This Month (Ontime)</h2>
          <table>
            <thead>
              <tr>
                <th>Project</th>
                <th>Scheduled End</th>
                <th>Actual End</th>
                <th>Rag Status</th>
              </tr>
            </thead>
            <tbody>
              <% if @total_this_month[:ontime_projects].blank? %>
                <tr><td colspan="8" style="text-align: center;">No records to display.</td></tr>
              <% else %>
                <% @total_this_month[:ontime_projects].each do |data| %>
                  <tr>
                    <td><%= link_to data.name, project_path(data) %></td>
                    <td><%= formatted_date(date_value(data, "Scheduled End Date")) %></td>
                    <td><%= formatted_date(date_value(data, "Actual End Date")) %></td>
                    <td></td>
                  </tr>
                <% end %>
              <% end %>
            </tbody>
          </table>
        </div>
        <div class="top-delayed-projects">
          <h2>Top 3 Delayed Projects</h2>
          <table>
            <thead>
              <tr>
                <th>Project</th>
                <th>Scheduled End</th>
                <th>Actual End</th>
                <th>Delay (days)</th>
              </tr>
            </thead>
            <tbody>
              <% if @top_delayed_projects.blank? %>
                <tr><td colspan="8" style="text-align: center;">No records to display.</td></tr>
              <% else %>
                <% @top_delayed_projects.each do |data| %>
                  <tr>
                    <td><%= link_to data[:project].name, project_path(data[:project]) %></td>
                    <td><%= formatted_date(date_value(data[:project], "Scheduled End Date")) %></td>
                    <td><%= formatted_date(date_value(data[:project], "Actual End Date")) %></td>
                    <td><%= data[:delay] %> days</td>
                  </tr>
                <% end %>
              <% end %>
            </tbody>
          </table>
        </div>
      <% else %>
     <% end %>
  </div>
</div>

<script>
  function exportToCSV(filterType, filterValue, statusValue = null) {
    let url = `/export_project_score_to_csv?filter_type=${filterType}&filter_value=${filterValue}`;

    // If there's a status value (for category/priority/application_name), append it
    if (statusValue) {
      url += `&status_value=${statusValue}`;
    }

    // Trigger CSV download
    window.location.href = url;
  }
</script>

<% params[:type] ||= "Project" %>
<% if params[:type] == "Project" %>
<script>

  document.addEventListener("DOMContentLoaded", function () {
    const filterSelect = document.getElementById("date-filter");
    const lastYearDelayedTable = document.getElementById("last-year-delayed-table");
    const lastYearOntimeTable = document.getElementById("last-year-ontime-table");
    const yearToDateDelayedTable = document.getElementById("year-to-date-delayed-table");
    const yearToDateOntimeTablPriorityCharte = document.getElementById("year-to-date-ontime-table");
    const thisMonthDelayedTable = document.getElementById("this-month-delayed-table");
    const thisMonthOntimeTable = document.getElementById("this-month-ontime-table");

    // Hide all tables initially
    function hideAllTables() {
      lastYearDelayedTable.style.display = "none";
      lastYearOntimeTable.style.display = "none";
      yearToDateDelayedTable.style.display = "none";
      yearToDateOntimeTable.style.display = "none";
      thisMonthDelayedTable.style.display = "none";
      thisMonthOntimeTable.style.display = "none";
    }
  });

  // Function to toggle tables based on chart click
  function toggleTables(filter) {
    // Hide all tables
    document.querySelectorAll('.chart-projects').forEach(function(table) {
      table.style.display = 'none';
    });

    // Show corresponding tables based on filter
    switch (filter) {
      case "last_year":
        document.getElementById('last-year-ontime-table').style.display = 'block';
        document.getElementById('last-year-delayed-table').style.display = 'block';
        break;
      case "year_to_date":
        document.getElementById('year-to-date-ontime-table').style.display = 'block';
          document.getElementById('year-to-date-delayed-table').style.display = 'block';
        break;
      case "this_month":
        document.getElementById('this-month-ontime-table').style.display = 'block';
        document.getElementById('this-month-delayed-table').style.display = 'block';
        break;
    }
    // Scroll to the first visible table
    const visibleTable = document.querySelector('.chart-projects[style="display: block;"]');
    if (visibleTable) {
      visibleTable.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }

  // Add event listeners to each pie chart for click functionality
  document.getElementById('last-year-chart').addEventListener('click', function() {
    toggleTables("last_year");
  });

  document.getElementById('year-to-date-chart').addEventListener('click', function() {
    toggleTables("year_to_date");
  });

  document.getElementById('this-month-chart').addEventListener('click', function() {
    toggleTables("this_month");
  });



  Highcharts.chart('last-year-pie-chart', {
    credits: {
      enabled: false
    },
    chart: {
      type: 'pie'
    },
    title: {
      text: 'Previous Financial Year'
    },
    subtitle: {
      text: '<strong style="color: black">( <%= "#{2.years.ago.change(month: 4, day: 1).to_date.strftime("%d %b %y")} - #{1.year.ago.change(month: 3, day: 31).to_date.strftime("%d %b %y")}" %>)</strong>'
    },
    accessibility: {
      announceNewData: {
        enabled: true
      }
    },
    plotOptions: {
      pie: {
        cursor: 'pointer',
        dataLabels: {
          enabled: true,
          format: '{point.name}: {point.percentage:.1f} %'
        }
      }
    },
    tooltip: {
      pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
    },
    series: [{
      name: 'Project Timeliness',
      colorByPoint: true,
      data: [
        {
          name: 'Delayed',
          y: <%= pieChartData[:last_year][0] %>, 
          color: '#FFA500'
        },
        {
          name: 'On-Time',
          y: <%= pieChartData[:last_year][1] %>, 
          color: '#007BFF'
        }
      ],
       size: '100%'
    }]
  });
  Highcharts.chart('year-to-date-pie-chart', {
    credits: {
      enabled: false
    },
    chart: {
      type: 'pie'
    },
    title: {
      text: 'Current Financial Year'
    },
    subtitle: {
      text: '<strong style="color: black">(<%= "#{@financial_year_start.strftime("%d %b %y")} -#{@financial_year_end.strftime("%d %b %y")}" %>)</strong>'
    },
    accessibility: {
      announceNewData: {
        enabled: true
      }
    },
    plotOptions: {
      pie: {
        cursor: 'pointer',
        dataLabels: {
          enabled: true,
          format: '{point.name}: {point.percentage:.1f} %'
        }
      }
    },
    tooltip: {
      pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
    },
    series: [{
      name: 'Project Timeliness',
      colorByPoint: true,
      data: [
        {
          name: 'Delayed',
          y: <%= pieChartData[:year_to_date][0] %>, 
          color: '#FFA500'
        },
        {
          name: 'On-Time',
          y: <%= pieChartData[:year_to_date][1] %>, 
          color: '#007BFF'
        }
      ],
      size: '100%'
    }]
  });
  Highcharts.chart('this-month-pie-chart', {
    credits: {
      enabled: false
    },
    chart: {
      type: 'pie'
    },
    title: {
      text: 'Current Month'
    },
    subtitle: {
      text: '<strong style="color: black">(<%= "#{Time.current.beginning_of_month.to_date.strftime("%d %b %y")} - #{Time.current.end_of_month.to_date.strftime("%d %b %y")}"%>)</strong>'
    },
    accessibility: {
      announceNewData: {
        enabled: true
      }
    },
    plotOptions: {
      pie: {
        cursor: 'pointer',
        dataLabels: {
          enabled: true,
          format: '{point.name}: {point.percentage:.1f} %'
        }
      }
    },
    tooltip: {
      pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
    },
    series: [{
      name: 'Project Timeliness',
      colorByPoint: true,
      data: [
        {
          name: 'Delayed',
          y: <%= pieChartData[:this_month][0] %>, 
          color: '#FFA500'
        },
        {
          name: 'On-Time',
          y: <%= pieChartData[:this_month][1] %>, 
          color: '#007BFF'
        }
      ],
      size: '100%'
    }]
  });
</script>
<% else %>
<% end %>
<script>
  const chartData1 = <%= @chart_data1.to_json.html_safe %>;
  const priorities = <%= @priorities.to_json.html_safe %>;
  const statuses1 = <%= @project_status_text.values.to_json.html_safe %>;

  Highcharts.chart('priorityChart', {
    credits: {
      enabled: false
    },
    chart: {
      type: 'bar'
    },
    title: {
      text: 'Project Status by Priority'
    },
    xAxis: {
      categories: priorities, // Corrected: Set priorities as categories
      title: {
        text: 'Project Priorities'
      }
    },
    yAxis: {
      min: 0,
      title: {
        text: 'Number of Projects'
      },
      stackLabels: {
        enabled: true,
        style: {
          fontWeight: 'bold',
          color: 'gray'
        }
      }
    },
    legend: {
      reversed: true
    },
    plotOptions: {
      series: {
        cursor: 'pointer',
        point: {
          events: {
            click: function () {
              document.querySelectorAll('.chart-projects1').forEach(el => el.style.display = 'none');

              const priority = this.category || ""; // Ensured safe access
              const status = this.series.name || ""; 

              console.log("Clicked Priority:", priority);
              console.log("Clicked Status:", status);

              const tableId = `priority-${priority.toLowerCase().replace(/ /g, '-')}-status-${status.toLowerCase().replace(/ /g, '-')}-table`;
              const tableElement = document.getElementById(tableId);
              if (tableElement) {
                tableElement.style.display = 'block';
                tableElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
              } else {
                console.warn('Table not found:', tableId);
              }
            }
          }
        },
        borderWidth: 0,
        dataLabels: {
          enabled: true,
          format: '{point.y}'
        }
      }
    },
    tooltip: {
      formatter: function () {
        return `<b>${this.series.name}</b><br>${this.key}: ${this.y} projects`;
      }
    },
    series: statuses1.map((status, index) => ({
      name: status,
      data: chartData1.map(data => data.data[index]), 
      color: ['#4CAF50', '#FFC107', '#2196F3', '#9E9E9E', '#F44336'][index % 5] // Ensured safe indexing
    }))
  });

  const chartData2 = <%= @chart_data2.to_json.html_safe %>;
  const categories = <%= @categories.to_json.html_safe %>;
  const statuses2 = <%= @project_status_text.values.to_json.html_safe %>;

  Highcharts.chart('categoryChart', {
    credits: {
      enabled: false
    },
    chart: {
      type: 'bar'
    },
    title: {
      text: 'Project Status by Category'
    },
    xAxis: {
      categories: categories, 
      title: {
        text: 'Project Categories'
      }
    },
    yAxis: {
      min: 0,
      title: {
        text: 'Number of Projects'
      },
      stackLabels: {
        enabled: true,
        style: {
          fontWeight: 'bold',
          color: 'gray'
        }
      }
    },
    legend: {
      reversed: true
    },
    plotOptions: {
      series: {
        cursor: 'pointer',
        point: {
          events: {
            click: function () {
              document.querySelectorAll('.chart-projects2').forEach(el => el.style.display = 'none');

              const category = this.category || ""; 
              const status = this.series.name || ""; 

              console.log("Clicked Category:", category);
              console.log("Clicked Status:", status);

              const tableId = `category-${category.toLowerCase().replace(/ /g, '-')}-status-${status.toLowerCase().replace(/ /g, '-')}-table`;
              const tableElement = document.getElementById(tableId);
              if (tableElement) {
                tableElement.style.display = 'block';
                tableElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
              } else {
                console.warn('Table not found:', tableId);
              }
            }
          }
        },
        borderWidth: 0,
        dataLabels: {
          enabled: true,
          format: '{point.y}'
        }
      }
    },
    tooltip: {
      formatter: function () {
        return `<b>${this.series.name}</b><br>${this.key}: ${this.y} projects`;
      }
    },
    series: statuses2.map((status, index) => ({
      name: status,
      data: chartData2.map(data => data.data[index]), 
      color: ['#4CAF50', '#FFC107', '#2196F3', '#9E9E9E', '#F44336'][index % 5] 
    }))
  });

  const chartData3 = <%= @chart_data3.to_json.html_safe %>;
  const application_names = <%= @application_names.to_json.html_safe %>;
  const statuses3 = <%= @project_status_text.values.to_json.html_safe %>;

  Highcharts.chart('applicationNameChart', {
    credits: {
      enabled: false
    },
    chart: {
      type: 'bar'
    },
    title: {
      text: 'Project Status by Application Name'
    },
    xAxis: {
      categories: application_names, 
      title: {
        text: 'Project Application Names'
      }
    },
    yAxis: {
      min: 0,
      title: {
        text: 'Number of Projects'
      },
      stackLabels: {
        enabled: true,
        style: {
          fontWeight: 'bold',
          color: 'gray'
        }
      }
    },
    legend: {
      reversed: true
    },
    plotOptions: {
      series: {
        cursor: 'pointer',
        point: {
          events: {
            click: function () {
              document.querySelectorAll('.chart-projects3').forEach(el => el.style.display = 'none');

              const application_name = this.category || ""; 
              const status = this.series.name || ""; 

              console.log("Clicked Application Name:", application_name);
              console.log("Clicked Status:", status);

              const tableId = `application_name-${application_name.toLowerCase().replace(/ /g, '-')}-status-${status.toLowerCase().replace(/ /g, '-')}-table`;
              const tableElement = document.getElementById(tableId);
              if (tableElement) {
                tableElement.style.display = 'block';
                tableElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
              } else {
                console.warn('Table not found:', tableId);
              }
            }
          }
        },
        borderWidth: 0,
        dataLabels: {
          enabled: true,
          format: '{point.y}'
        }
      }
    },
    tooltip: {
      formatter: function () {
        return `<b>${this.series.name}</b><br>${this.key}: ${this.y} projects`;
      }
    },
    series: statuses3.map((status, index) => ({
      name: status,
      data: chartData3.map(data => data.data[index]), 
      color: ['#4CAF50', '#FFC107', '#2196F3', '#9E9E9E', '#F44336'][index % 5] 
    }))
  });
</script>

<style>

.filter-form {
  background: #f9f9f9;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
}
.filter-container {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 15px;
}

/* Filters */
.filter-group {
  flex: 1;
  min-width: 250px;
}

.filter-label {
  font-weight: bold;
  display: block;
  margin-bottom: 5px;
}

.filter-input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 5px;
}
/* Container for dropdown */
.dropdown {
  position: relative;
  display: inline-block;
  width: 300px; /* Wider for better readability */
}

#search_input {
  width: 100px; /* Full width to match dropdown */
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.dropdown-content {
  display: none; /* Default hidden, shown dynamically */
  position: absolute;
  top: calc(100% + 4px); /* Slight gap from the input box */
  left: 0;
  width: 100%;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 4px; /* Rounded corners for better UI */
  max-height: 200px; /* Slightly taller for more options */
  overflow-y: auto; /* Scrollable when content exceeds height */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow for better visibility */
  z-index: 10;
}

.dropdown-content label {
  display: block;
  padding: 6px 12px;
  margin: 0; /* Maintain consistent spacing */
  font-size: 14px; /* Slightly larger text for readability */
  cursor: pointer; /* Indicate clickable items */
}

.dropdown-content label:hover {
  background-color: #f7f7f7; /* Highlight on hover */
}

.dropdown-content input[type="checkbox"] {
  margin-right: 8px; /* Space between checkbox and label text */
}
  .dashboard-container {
    max-width: 1200px;
    margin: 30px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }

  .chart-projects {
    display: none;
    margin-top: 20px;
  }
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
  }

  th, td {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
  }

  th {
    background-color: #f2f2f2;
  }
</style>
<style>
  .dashboard-container {
    max-width: 1200px;
    margin: 30px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }

  .chart-projects {
    display: none;
    margin-top: 20px;
  }

  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
  }

  th, td {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
  }

  th {
    background-color: #f2f2f2;
  }
</style>